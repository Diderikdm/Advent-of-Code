def mod1(oxxoo, nummers, position, relativebase):
    if oxxoo == 0:
        return int(nummers[int(nummers[position])])
    elif oxxoo == 1:
        return int(nummers[position])
    elif oxxoo == 2:
        return int(nummers[(int(nummers[position]))+relativebase])
    
def mod2(xoooo, nummers, position, relativebase):
    if xoooo == 0:
        return int(nummers[position])
    elif xoooo == 1:
        return int(position)
    elif xoooo == 2:
        return int(int(nummers[position]) + relativebase)

h = open("C:/Projecten/d17.txt")
nummers = h.read().split(",")
for e in range(10000):
    nummers.append("0")

output = []
e = 0
relativebase = 0
while e < len(nummers):
    steps = 4
    if int(nummers[e]) < 99999:
        zeros = 5 - len(str(nummers[e]))
        nummers[e] = (zeros * "0" + str(nummers[e]))
    xoooo = int(nummers[e][0])
    oxooo = int(nummers[e][1])
    ooxoo = int(nummers[e][2])
    oooxx = int(nummers[e][3:])
    if oooxx == 1:
        nummers[mod2(xoooo, nummers, e+3, relativebase)] = mod1(ooxoo, nummers, e+1, relativebase) + mod1(oxooo, nummers, e+2, relativebase)
    elif oooxx == 2:
        nummers[mod2(xoooo, nummers, e+3, relativebase)] = mod1(ooxoo, nummers, e+1, relativebase) * mod1(oxooo, nummers, e+2, relativebase)
    elif oooxx == 3:
        steps = 2
        if ooxoo != 1:
            nummers[mod2(ooxoo, nummers, e+1, relativebase)] = input()
    elif oooxx == 4:
        steps = 2
        output.append(int(nummers[mod2(ooxoo, nummers, e+1, relativebase)]))
    elif oooxx == 5:
        steps = 3
        if mod1(ooxoo, nummers, e+1, relativebase) != 0:
            steps = 0
            e = mod1(oxooo, nummers, e+2, relativebase)
    elif oooxx == 6:
        steps = 3
        if mod1(ooxoo, nummers, e+1, relativebase) == 0:
            steps = 0
            e = mod1(oxooo, nummers, e+2, relativebase)
    elif oooxx == 7:
        if mod1(ooxoo, nummers, e+1, relativebase) < mod1(oxooo, nummers, e+2, relativebase):
            nummers[mod2(xoooo, nummers, e+3, relativebase)] = 1
        else:
            nummers[mod2(xoooo, nummers, e+3, relativebase)] = 0
    elif oooxx == 8:
        if mod1(ooxoo, nummers, e+1, relativebase) == mod1(oxooo, nummers, e+2, relativebase):
            nummers[mod2(xoooo, nummers, e+3, relativebase)] = 1
        else:
            nummers[mod2(xoooo, nummers, e+3, relativebase)] = 0
    elif oooxx == 9:
        steps = 2
        relativebase += mod1(ooxoo, nummers, e+1, relativebase)
    elif oooxx == 99:
        break    
    e += steps

e=0
while e < len(output):
    output[e] = chr(output[e])
    e+=1

coord = []
coords = []
a=0
b=0
for e in output:
    temp = (a, b, e)
    coord.append(temp)
    a+=1
    if e == "\n":
        coords.append(coord[:])
        coord.clear()
        a=0
        b+=1
        
cross = []
a=0
b=0
while a < len(coords):
    b=0
    while b < len(coords[a]):
        try:
            if coords[a][b][2] == "#":
                if coords[a-1][b][2] == "#" and coords[a+1][b][2] == "#" and coords[a][b-1][2] == "#" and coords[a][b+1][2] == "#":
                    temp = (coords[a][b][0], coords[a][b][1])
                    cross.append(temp)
        except:
            b+=1
        b+=1
    a+=1
print(cross)
            
            

string = ""
for e in coords:
    for f in e:
        string+=f[2]
print(string)

totaal = 0
for e in cross:
    totaal += (int(e[0])*int(e[1]))

print(totaal)

#7816


............................#......................
............................#......................
..........#######...........#......................
..........#.....#...........#......................
..........#.....#...........#.......###########....
..........#.....#...........#.......#.........#....
..........#.....#...........#############.....#....
..........#.....#...................#...#.....#....
..........#.....#.....#############.#...#.....#....
..........#.....#.....#...........#.#...#.....#....
..........#.....#.....#...........#.#############..
..........#.....#.....#...........#.....#.....#.#..
..........#.....#############.....#.....#.....#.#..
..........#...........#.....#.....#.....#.....#.#..
^##########...........#.###########.....#.....#.#..
......................#.#...#...........#.....#.#..
......................#.#...#...........#######.#..
......................#.#...#...................#..
......................#######...............#######
........................#...................#...#.#
........................#.#######...........#...#.#
........................#.#.....#...........#...#.#
........................#.#.....#.....###########.#
........................#.#.....#.....#.....#.....#
........................#.#.....#.....#.....#.....#
........................#.#.....#.....#.....#.....#
........................#############.#.....#.....#
..........................#.....#...#.#.....#.....#
..........................#.....#...#.#############
..........................#.....#...#.......#......
..........................#.....#############......
..........................#.........#..............
..........................###########..............
